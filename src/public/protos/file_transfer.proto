/**
 File transfer protos written by Liam Cottle <liam@liamcottle.com>
 - sender should send an OfferFileTransfer to other user
 - recipient should send back an AcceptFileTransfer or RejectFileTransfer
 - recipient can tell the sender how big each file part can be when accepting the file transfer
 - sender should send the first file part to the recipient when receiving an AcceptFileTransfer
 - recipient should then send RequestFileParts until all remaining parts are received
 - sender should send a FilePart for each index in partIndexes when a RequestFileParts is received
 - recipient should send CompletedFileTransfer when all parts are received
 - sender and recipient can send CancelFileTransfer to tell the other side they are no longer interested in the file
 - todo: add fileHash or fileCrc in OfferFileTransfer to allow recipient to confirm assembled parts are not corrupted
 */
syntax = "proto3";

message FileTransferPacket {
  optional OfferFileTransfer offerFileTransfer = 1;
  optional AcceptFileTransfer acceptFileTransfer = 2;
  optional RejectFileTransfer rejectFileTransfer = 3;
  optional CancelFileTransfer cancelFileTransfer = 4;
  optional CompletedFileTransfer completedFileTransfer = 5;
  optional FilePart filePart = 6;
  optional RequestFileParts requestFileParts = 7;
  optional RequestFileChunk requestFileChunk = 8;
  optional FileChunk fileChunk = 9;
}

message OfferFileTransfer {
  uint32 id = 1;
  string fileName = 2;
  uint32 fileSize = 3;
}

message AcceptFileTransfer {
  uint32 fileTransferId = 1;
  uint32 maxAcceptablePartSize = 2;
}

message RejectFileTransfer {
  uint32 fileTransferId = 1;
}

message CancelFileTransfer {
  uint32 fileTransferId = 1;
}

message CompletedFileTransfer {
  uint32 fileTransferId = 1;
}

message RequestFileParts {
  uint32 fileTransferId = 1;
  repeated uint32 partIndexes = 2;
}

message FilePart {
  uint32 fileTransferId = 1;
  uint32 partIndex = 2;
  uint32 totalParts = 3;
  bytes data = 4;
}

message RequestFileChunk {
  uint32 fileTransferId = 1;
  uint32 offset = 2;
  uint32 length = 3;
}

message FileChunk {
  uint32 fileTransferId = 1;
  uint32 offset = 2;
  uint32 length = 3;
  bytes data = 4;
}
